OUTLINE: 
  os services
  user os interface
  system call
  system program
  os structure

Objective = To describe the services an operating system provides to users, processes, and other systems. To discuss various ways of structuring an os.

Major task of os:
 - Providing nice environment for users
 - Resource allocation and management

OPERATING SYSTEM SERVICES

One set of os services provides functions that are helpful to the users:
 - User interface: Command Line, GUI, Batch
 - Program Execution: Load the program into memory till execution.
 - I/O operations: A running program may require I/O, which may involve a file or an I/O device.
 - File-System Manipulation: Programs need to read and write files and directories, create and delete them, search them, list file information,permission management.
 - Communications
 - Error Detection and Handling

Another set of os functions exists for ensuring the efficient operation of the system itself via resource sharing
 - Resource Allocation: It could be CPU, Memory, File storage, I/O device
 - Accounting: Keeping track of which users use how much and what kind of resources
 - Protection and Security: Authentication

--Hierarchy--
1. User and other systems
2. User Interfaces [GUI,BATCH,COMMAND LINE(CLI)]
3. System Call
4. Services [PROGRAM EXECUTION, I/O OPERATIONS, FILE SYSTEMS,...]
5. OS
6. Hardware

COMMAND LINE INTERFACE(CLI)
 - Allows direct command entry
 - Sometimes implemented in kernel, sometimes by system program running on top of the kernel(shell in Unix)
 - Fetches a command from the user and executes it

GRAPHICAL USER INTERFACE(GUI)
 - Icons represent the programs or files
 Many os have both of them.

SYSTEM CALLS

Both mentioned above are the ways by which user interacts with the os. System call are ways by which services are accessed by application programs/ system programs. Written in high level language. Mostly accessed by programs via a high level Application Program Interface(API) rather than direct system call use. 
Three most common APIs:
 Win32 API for Windows
 POSIX (all version of UNIX)
 JAVA API for JVM

For example - When we write a normal C code for printing the "Hello World" onto the screen, we call the "printf" function which itself is a part of the library. And via the library os system call is done. 

Why use API rather than system calls?
 - Because for calling the system we would have to switch to kernel mode and it only makes the things complicated. So, we leave that for the API to handle.
